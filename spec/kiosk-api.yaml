---
swagger: "2.0"
info:
  version: "0.0.1"
  title: "Kiosk API"
host: "zf1oua0eo3.execute-api.ap-northeast-2.amazonaws.com"
basePath: "/dev"
schemes:
- "https"
paths:
  /orders/{user_id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      tags:
        - "orders"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/OrderRes"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /orders/new:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Order"
        required: true
        schema:
            $ref: "#/definitions/NewOrderReq"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      tags:
        - "orders"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/NewOrderRes"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:539277938309:function:kioskAPI_order_new/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /categories/subcategories/{store_id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "store_id"
        in: "path"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      tags:
        - "categories"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SubcategoryRes"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri: "arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:539277938309:function:kioskAPI_subcategory/invocations"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\n  \"body\" : $input.json('$'),\n  \"headers\": {\n\
            \    #foreach($header in $input.params().header.keySet())\n    \"$header\"\
            : \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"method\": \"$context.httpMethod\",\n  \"params\"\
            : {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\"\
            : \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n\
            \    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \ #if($foreach.hasNext),#end\n\n    #end\n  }  \n}"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /menu/{sub_category_id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sub_category_id"
        in: "path"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      tags:
        - "menu"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MenuRes"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\n  \"body\" : $input.json('$'),\n  \"headers\": {\n\
            \    #foreach($header in $input.params().header.keySet())\n    \"$header\"\
            : \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"method\": \"$context.httpMethod\",\n  \"params\"\
            : {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\"\
            : \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n\
            \    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \ #if($foreach.hasNext),#end\n\n    #end\n  }  \n}"
        uri: "arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:539277938309:function:kioskAPI_menu/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /menu/menu_option/{menu_id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "menu_id"
        in: "path"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      tags:
        - "menu"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MenuOptionRes"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        uri: "arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:539277938309:function:kioskAPI_menu_option/invocations"
        passthroughBehavior: "when_no_templates"
        requestTemplates:
          application/json: "{\n  \"body\" : $input.json('$'),\n  \"headers\": {\n\
            \    #foreach($header in $input.params().header.keySet())\n    \"$header\"\
            : \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"method\": \"$context.httpMethod\",\n  \"params\"\
            : {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\"\
            : \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n\
            \    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \ #if($foreach.hasNext),#end\n\n    #end\n  }  \n}"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
        
  /stores/{account_id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "account_id"
        in: "path"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      tags:
        - "stores"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/StoresRes"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n  \"body\" : $input.json('$'),\n  \"headers\": {\n\
            \    #foreach($header in $input.params().header.keySet())\n    \"$header\"\
            : \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"method\": \"$context.httpMethod\",\n  \"params\"\
            : {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\"\
            : \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\
            \n    #end\n  },\n  \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n\
            \    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \ #if($foreach.hasNext),#end\n\n    #end\n  }  \n}"
        uri: "arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:539277938309:function:kioskAPI_store/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /users/login:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "LoginReq"
        required: true
        schema:
          $ref: "#/definitions/LoginReq"
      tags:
       - "users"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/LoginRes"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-2:539277938309:function:kioskAPI_login/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
definitions:
  OrderRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공여부"
      responseMsg:
        type: "string"
        description: "에러 코드"
      orders:
        type: "array"
        description: "주문 정보 리스트"
        items:
          type: "object"
          properties:
            sid:
              type: "string"
              description: "매장번호"
            m_no:
              type: "string"
              description: "상점번호"
            user_id:
              type: "string"
              description: "회사명"
            amount:
              type: "string"
              description: "점장 정보"
            coupon:
              type: "string"
              description: "매장 주소"
            coupon_title:
              type: "string"
              description: "이미지"
            discount:
              type: "string"
            discount_title:
              type: "string"
            price:
              type: "string"
              description: "결제금액 = 주문총액 - 쿠폰 - 할인"
            add_points:
              type: "string"
            order_status:
              type: "string"
              description: "주문완료, 주문취소, 환불 , null"
            cook_status:
              type: "string"
              description: "처리중, 처리완료"
            paymethod:
              type: "string"
              description: "현금,카드,포인트(1,0,0)"
            user_agent:
              type: "string"
            cash:
              type: "string"
            card:
              type: "string"
            points:
              type: "string"
            package:
              type: "string"
            registed_date:
              type: "string"
            order_detail:
              type: "array"
              description: "주문 상세"
              items:
                type: "object"
                properties:
                  order_detail_idx:
                    type: "string"
                  order_idx:
                    type: "string"
                  menu_idx:
                    type: "string"
                  menu_option_idx:
                    type: "string"
                    description: "0:메인 메뉴, / 1:옵션 메뉴"
                  menu_name:
                    type: "string"
                  quantity:
                    type: "string"
                  price:
                    type: "string"
  NewOrderReq:
    type: "object"
    properties:
      order_id:
        type: "string"
      store_id:
        type: "string"
      machine_id:
        type: "string"
      user_id:
        type: "string"
      amount:
        type: "string"
        description: "주문총액"
      coupon:
        type: "string"
      coupon_title:
        type: "string"
      discount:
        type: "string"
      discount_title:
        type: "string"
      price:
        type: "string"
        description: "결제금액 = 주문총액-쿠폰-할인"
      add_points:
        type: "string"
      order_status:
        type: "string"
        description: "주문완료, 주문취소, 환불, null"
      cook_status:
        type: "string"
        description: "처리중, 처리완료"
      paymethod:
        type: "string"
        description: "현금, 카드, 포인트 (1,0,0), (1,1,1)"
      user_agent:
        type: "string"
        description: "매장, 모바일"
      cash:
        type: "string"
      card:
        type: "string"
      points:
        type: "string"
      package:
        type: "string"
        description: "포장선택 (0,1)"
      registe:
        type: "string"
  NewOrderRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공유부"
      responseMsg:
        type: "string"
        description: "응답 메시지"
  SubcategoryRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공여부"
      responseMsg:
        type: "string"
        description: "응답 코드"
      data:
        type: "array"
        description: "서브 카테고리"
        items:
          type: "string"
          properties:
            category_id:
              type: "string"
            catalog_name:
              type: "string"
            sub_category_id:
              type: "string"
            sub_category_name:
              type: "string"
            file_id:
              type: "string"
  MenuRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공여부"
      responseMsg:
        type: "string"
        description: "응답 코드"
      data:
        type: "array"
        description: "메뉴 리스트"
        items:
          type: "string"
          properties:
            menu_id:
              type: "string"
            store_id:
              type: "string"
            sub_category_id:
              type: "string"
            ingredient_id:
              type: "string"
            m_item:
              type: "string"
              description: "메뉴명"
            m_type:
              type: "string"
              description: "메뉴옵션 타입"
            price:
              type: "string"
            points:
              type: "string"
            calory:
              type: "string"
            barcode:
              type: "string"
            use_YN:
              type: "string"
              description: "판매여부"
            m_regidate:
              type: "string"
            description:
              type: "string"
              description: "메뉴설명"
            file_id:
              type: "string"
            server:
              type: "string"
              description: "파일서버 주소"
            volume:
              type: "string"
            path:
              type: "string"
            name:
              type: "string"
              description: "파일 이름"
            status:
              type: "string"
              description: "파일 상태"
            saved_time:
              type: "string"
  MenuOptionRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공여부"
      responseMsg:
        type: "string"
        description: "응답 코드"
      data:
        type: "array"
        items:
          type: "string"
          description: "메뉴옵션 리스트"
          properties:
            menu_id:
              type: "string"
            store_id:
              type: "string"
            sub_category_id:
              type: "string"
            inventory_id:
              type: "string"
            m_item:
              type: "string"
              description: "메뉴명"
            m_type:
              type: "string"
              description: "메뉴옵션 타입"
            price:
              type: "string"
            points:
              type: "string"
            calory:
              type: "string"
            barcode:
              type: "string"
            use_YN:
              type: "string"
              description: "판매여부"
            m_regidate:
              type: "string"
            description:
              type: "string"
              description: "메뉴설명"
            file_id:
              type: "string"
  StoresRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공여부"
      responseMsg:
        type: "string"
        description: "에러 코드"
      data:
        type: "array"
        description: "스토어 정보 리스트"
        items:
          type: "object"
          properties:
            store_id:
              type: "string"
              description: "매장번호"
            store:
              type: "string"
              description: "회사명"
            s_address:
              type: "string"
            s_logo:
              type: "string"
            status:
              type: "string"
            merchant_id:
              type: "string"
            company:
              type: "string"
            m_name:
              type: "string"
            m_phone:
              type: "string"
            m_address:
              type: "string"
            m_logo:
              type: "string"
            regidate:
              type: "string"
            
  LoginRes:
    type: "object"
    properties:
      responseStatus:
        type: "string"
        description: "성공유부"
      responseMsg:
        type: "string"
        description: "응답메시지"
      data:
        type: "array"
        items:
          type: "object"
          properties:
            account_id:
              type: "string"
            name:
              type: "string"
            phone:
              type: "string"
            token:
              type: "string"
            status:
              type: "string"
            regidate:
              type: "string"
            user_id:
              type: "string"
            store_id:
              type: "string"
            u_points:
              type: "string"
            u_status:
              type: "string"
            u_level:
              type: "string"
            usercol:
              type: "string"
  LoginReq:
    type: "object"
    properties:
      login_id:
        type: "string"
        description: "login id"
      login_passwd:
        type: "string"
        description: "login passward"
